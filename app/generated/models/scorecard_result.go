// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2021 Security Scorecard Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScorecardResult scorecard result
//
// swagger:model ScorecardResult
type ScorecardResult struct {

	// checks
	Checks []*ScorecardCheck `json:"checks"`

	// date
	Date string `json:"date,omitempty"`

	// metadata
	Metadata string `json:"metadata,omitempty"`

	// repo
	Repo *ScorecardResultRepo `json:"repo,omitempty"`

	// Aggregate score of the repository
	Score int64 `json:"score,omitempty"`

	// scorecard
	Scorecard *ScorecardResultScorecard `json:"scorecard,omitempty"`
}

// Validate validates this scorecard result
func (m *ScorecardResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScorecard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScorecardResult) validateChecks(formats strfmt.Registry) error {
	if swag.IsZero(m.Checks) { // not required
		return nil
	}

	for i := 0; i < len(m.Checks); i++ {
		if swag.IsZero(m.Checks[i]) { // not required
			continue
		}

		if m.Checks[i] != nil {
			if err := m.Checks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScorecardResult) validateRepo(formats strfmt.Registry) error {
	if swag.IsZero(m.Repo) { // not required
		return nil
	}

	if m.Repo != nil {
		if err := m.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repo")
			}
			return err
		}
	}

	return nil
}

func (m *ScorecardResult) validateScorecard(formats strfmt.Registry) error {
	if swag.IsZero(m.Scorecard) { // not required
		return nil
	}

	if m.Scorecard != nil {
		if err := m.Scorecard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scorecard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scorecard")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scorecard result based on the context it is used
func (m *ScorecardResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScorecard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScorecardResult) contextValidateChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Checks); i++ {

		if m.Checks[i] != nil {
			if err := m.Checks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScorecardResult) contextValidateRepo(ctx context.Context, formats strfmt.Registry) error {

	if m.Repo != nil {
		if err := m.Repo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repo")
			}
			return err
		}
	}

	return nil
}

func (m *ScorecardResult) contextValidateScorecard(ctx context.Context, formats strfmt.Registry) error {

	if m.Scorecard != nil {
		if err := m.Scorecard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scorecard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scorecard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScorecardResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScorecardResult) UnmarshalBinary(b []byte) error {
	var res ScorecardResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScorecardResultRepo scorecard result repo
//
// swagger:model ScorecardResultRepo
type ScorecardResultRepo struct {

	// SHA256 value of the analyzed commit expressed as hexadecimal
	// Pattern: ^[0-9a-fA-F]{64}$
	Commit string `json:"commit,omitempty"`

	// respository that was analyzed
	Name string `json:"name,omitempty"`
}

// Validate validates this scorecard result repo
func (m *ScorecardResultRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScorecardResultRepo) validateCommit(formats strfmt.Registry) error {
	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if err := validate.Pattern("repo"+"."+"commit", "body", m.Commit, `^[0-9a-fA-F]{64}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scorecard result repo based on context it is used
func (m *ScorecardResultRepo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScorecardResultRepo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScorecardResultRepo) UnmarshalBinary(b []byte) error {
	var res ScorecardResultRepo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScorecardResultScorecard scorecard result scorecard
//
// swagger:model ScorecardResultScorecard
type ScorecardResultScorecard struct {

	// SHA256 value of the Scorecard commit used for analysis
	// Pattern: ^[0-9a-fA-F]{64}$
	Commit string `json:"commit,omitempty"`

	// Scorecard version used for this analysis
	Version string `json:"version,omitempty"`
}

// Validate validates this scorecard result scorecard
func (m *ScorecardResultScorecard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScorecardResultScorecard) validateCommit(formats strfmt.Registry) error {
	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if err := validate.Pattern("scorecard"+"."+"commit", "body", m.Commit, `^[0-9a-fA-F]{64}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scorecard result scorecard based on context it is used
func (m *ScorecardResultScorecard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScorecardResultScorecard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScorecardResultScorecard) UnmarshalBinary(b []byte) error {
	var res ScorecardResultScorecard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
